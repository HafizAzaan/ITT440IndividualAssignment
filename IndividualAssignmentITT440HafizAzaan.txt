include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main()
 {
   	 int pipefd[2];
   	 pid_t childpid;
    	char message[100];
    
   	 if (pipe(pipefd) == -1) 
   	 {
       		 perror("Failed to create pipe");
       		 return 1;
   	 }

   	 childpid = fork();
   	 if (childpid == -1)
 {
     		 perror("Failed to fork");
       	 	return 1;
   	 }

    	if (childpid == 0) 
{ 
        		close(pipefd[1]); 
        
       		 char buffer[sizeof(message)];
       		 ssize_t bytesRead = read(pipefd[0], buffer, sizeof(buffer));
      
        		buffer[bytesRead] = '\0'; 
        
        		write(1, "Child process is reading from pipe.\n", 36);
        		write(1, "Message received from parent: ", 30);
       		 write(1, buffer, bytesRead);
       		 write(1, "\n", 1);

       	 	close(pipefd[0]); 
       		 _exit(0);
  	  } 
else 
{ 
       		 close(pipefd[0]); 
  write(1, "Enter a message: ", 17);
       		 ssize_t bytesWritten = read(0, message, sizeof(message));
       		 if (bytesWritten == -1)
 {
            			perror("Failed to read");
            			return 1;
      	 	 }
        	
message[bytesWritten] = '\0'; 

      	  write(1, "Parent process is writing to pipe.\n", 36);
        	write(pipefd[1], message, bytesWritten);

       	 close(pipefd[1]); 

      	  wait(NULL); 
   	 }

    return 0;
}
